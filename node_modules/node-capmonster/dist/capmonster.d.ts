export declare class CapmonsterClient {
    clientKey: string;
    private balanceUrl;
    private taskResultUrl;
    private createTaskUrl;
    private hostUrl;
    private softId;
    constructor(clientKey: string);
    getBalance: () => Promise<any>;
    getTaskResult: (taskId: number) => Promise<any>;
    joinTaskResult: (taskId: number, maximumTime?: number | undefined) => Promise<any>;
    private timer;
    protected isReady: (response: any) => Promise<boolean>;
    protected makeRequest: (method: string, data: any) => Promise<any>;
    private checkResponse;
    protected addCookies: (cookies: string | Array<any> | object, data: any) => Promise<any[]>;
}
export declare class CapmonsterError extends Error {
    code: string;
    constructor(_code: string, msg: string);
}
export declare class UAProxy extends CapmonsterClient {
    proxyType: any;
    userAgent: string;
    proxyAddress: string;
    proxyPort: number;
    proxyLogin: string;
    proxyPassword: string;
    constructor(clientKey: string);
    setUserAgent: (userAgent: string) => void;
    resetUserAgent: () => void;
    protected addUserAgent: (data: any) => any[];
    setProxy: (proxyType: string, proxyAddress: string, proxyPort: number, proxyLogin?: string | undefined, proxyPassword?: string | undefined) => void;
    disableProxy: () => void;
    protected isProxyTask: (data: any) => any[];
}
