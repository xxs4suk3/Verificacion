"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UAProxy = exports.CapmonsterError = exports.CapmonsterClient = void 0;
var axios_1 = require("axios");
var CapmonsterClient = /** @class */ (function () {
    function CapmonsterClient(clientKey) {
        var _this = this;
        this.balanceUrl = "/getBalance";
        this.taskResultUrl = "/getTaskResult";
        this.createTaskUrl = "/createTask";
        this.hostUrl = "https://api.capmonster.cloud";
        this.softId = 32;
        this.getBalance = function () { return __awaiter(_this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios_1.default.post(this.hostUrl + this.balanceUrl, { clientKey: this.clientKey })];
                    case 1:
                        response = (_a.sent()).data;
                        return [4 /*yield*/, this.checkResponse(response)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, response.balance];
                }
            });
        }); };
        this.getTaskResult = function (taskId) { return __awaiter(_this, void 0, void 0, function () {
            var data, result, isReady;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        data = {
                            "clientKey": this.clientKey,
                            "taskId": taskId
                        };
                        return [4 /*yield*/, this.makeRequest("getTaskResult", data)];
                    case 1:
                        result = _a.sent();
                        return [4 /*yield*/, this.isReady(result)];
                    case 2:
                        isReady = _a.sent();
                        if (isReady) {
                            return [2 /*return*/, result.solution];
                        }
                        else {
                            return [2 /*return*/, false];
                        }
                        return [2 /*return*/];
                }
            });
        }); };
        this.joinTaskResult = function (taskId, maximumTime) { return __awaiter(_this, void 0, void 0, function () {
            var _maxTime, i, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _maxTime = maximumTime ? maximumTime : 120;
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i <= _maxTime + 1)) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.getTaskResult(taskId)];
                    case 2:
                        result = _a.sent();
                        if (!(result !== false)) return [3 /*break*/, 3];
                        return [2 /*return*/, result];
                    case 3: return [4 /*yield*/, this.timer(2000)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        i += 2;
                        return [3 /*break*/, 1];
                    case 6: throw new CapmonsterError("ERROR_MAXIMUM_TIME_EXCEED", "Maximum time is exceed.");
                }
            });
        }); };
        this.timer = function (ms) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve) { return setTimeout(resolve, ms); })];
            });
        }); };
        this.isReady = function (response) { return __awaiter(_this, void 0, void 0, function () {
            var status;
            return __generator(this, function (_a) {
                status = response.status;
                return [2 /*return*/, status === "ready"];
            });
        }); };
        this.makeRequest = function (method, data) { return __awaiter(_this, void 0, void 0, function () {
            var _method, response, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _method = "getBalance";
                        if (method === "getBalance") {
                            _method = this.balanceUrl;
                        }
                        else if (method === "getTaskResult") {
                            _method = this.taskResultUrl;
                        }
                        else if (method === "createTask") {
                            _method = this.createTaskUrl;
                            data.softId = this.softId;
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, axios_1.default.post(this.hostUrl + _method, data)];
                    case 2:
                        response = (_a.sent()).data;
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        throw new CapmonsterError(e_1.name, e_1.message);
                    case 4: return [4 /*yield*/, this.checkResponse(response)];
                    case 5:
                        _a.sent();
                        return [2 /*return*/, response];
                }
            });
        }); };
        this.checkResponse = function (response) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (response.errorId !== 0) {
                    if (typeof response.errorDescription !== "undefined")
                        response.errorDescription = "";
                    throw new CapmonsterError(response.errorCode, response.errorDescription);
                }
                return [2 /*return*/];
            });
        }); };
        this.addCookies = function (cookies, data) { return __awaiter(_this, void 0, void 0, function () {
            var str_cookies, _i, cookies_1, cookie, _a, _b, _c, key, value;
            return __generator(this, function (_d) {
                str_cookies = "";
                if (typeof cookies === "string") {
                    str_cookies = cookies;
                }
                else if (Array.isArray(cookies)) {
                    if (cookies.length % 2 != 0)
                        throw new Error("Array cookies length must be even numbers");
                    for (_i = 0, cookies_1 = cookies; _i < cookies_1.length; _i++) {
                        cookie = cookies_1[_i];
                        str_cookies += cookies.indexOf(cookie) % 2 == 0 ? "".concat(cookie, "=") : "".concat(cookie, ";");
                    }
                }
                else if (typeof cookies === "object") {
                    for (_a = 0, _b = Object.entries(cookies); _a < _b.length; _a++) {
                        _c = _b[_a], key = _c[0], value = _c[1];
                        str_cookies += "".concat(key, "=").concat(value, ";");
                    }
                }
                str_cookies = str_cookies.substr(str_cookies.length - 1) == ";" ? str_cookies.slice(0, -1) : str_cookies;
                data.task.cookies = str_cookies;
                return [2 /*return*/, [data, true]];
            });
        }); };
        this.clientKey = clientKey;
    }
    return CapmonsterClient;
}());
exports.CapmonsterClient = CapmonsterClient;
var CapmonsterError = /** @class */ (function (_super) {
    __extends(CapmonsterError, _super);
    function CapmonsterError(_code, msg) {
        var _this = _super.call(this, "[".concat(_code, "] ").concat(msg)) || this;
        _this.name = _this.constructor.name;
        _this.code = _code;
        return _this;
    }
    return CapmonsterError;
}(Error));
exports.CapmonsterError = CapmonsterError;
var UAProxy = /** @class */ (function (_super) {
    __extends(UAProxy, _super);
    function UAProxy(clientKey) {
        var _this = _super.call(this, clientKey) || this;
        _this.setUserAgent = function (userAgent) {
            _this.userAgent = userAgent;
        };
        _this.resetUserAgent = function () {
            _this.userAgent = "";
        };
        _this.addUserAgent = function (data) {
            if (_this.userAgent) {
                data.task.userAgent = _this.userAgent;
                return [data, true];
            }
            return [data, false];
        };
        _this.setProxy = function (proxyType, proxyAddress, proxyPort, proxyLogin, proxyPassword) {
            _this.proxyType = proxyType;
            _this.proxyAddress = proxyAddress;
            _this.proxyPort = proxyPort;
            _this.proxyLogin = proxyLogin ? proxyLogin : "";
            _this.proxyPassword = proxyPassword ? proxyPassword : "";
        };
        _this.disableProxy = function () {
            _this.proxyType = "";
            _this.proxyAddress = "";
            _this.proxyPort = 0;
            _this.proxyLogin = "";
            _this.proxyPassword = "";
        };
        _this.isProxyTask = function (data) {
            if (_this.proxyType && _this.proxyAddress && _this.proxyPort) {
                data.task.proxyType = _this.proxyType;
                data.task.proxyAddress = _this.proxyAddress;
                data.task.proxyPort = _this.proxyPort;
                if (_this.proxyLogin && _this.proxyPassword) {
                    data.task.proxyLogin = _this.proxyLogin;
                    data.task.proxyPassword = _this.proxyPassword;
                }
                return [data, true];
            }
            data.task.type += "Proxyless";
            return [data, false];
        };
        return _this;
    }
    return UAProxy;
}(CapmonsterClient));
exports.UAProxy = UAProxy;
//# sourceMappingURL=capmonster.js.map